{"ast":null,"code":"var _jsxFileName = \"/Users/michael/front-3/src/components/WeatherAPP/WeatherApp.js\";\nimport React from \"react\";\nimport { Container } from \"@material-ui/core\";\nimport LoadingSpinner from \"./loading-spinner\";\nimport Weather from \"./Weather\";\nconst REACT_APP_API_URL = 'https://api.openweathermap.org/data/2.5';\nconst REACT_APP_API_KEY = 'bc2888013d5044448dbead76c8b69c18';\nconst initCity = \"Melbourne\";\n\nclass WeatherApp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.mapDataToWeatherInterface = data => {\n      const mapped = {\n        city: data.name,\n        country: data.sys.country,\n        date: data.dt * 1000,\n        humidity: data.main.humidity,\n        icon_id: data.weather[0].id,\n        temperature: data.main.temp,\n        description: data.weather[0].description,\n        wind_speed: Math.round(data.wind.speed * 3.6),\n        // convert from m/s to km/h\n        condition: data.cod\n      }; // Add extra properties for the five day forecast: dt_txt, icon, min, max\n\n      if (data.dt_txt) {\n        mapped.dt_txt = data.dt_txt;\n      }\n\n      if (data.weather[0].icon) {\n        mapped.icon = data.weather[0].icon;\n      }\n\n      if (data.main.temp_min && data.main.temp_max) {\n        mapped.max = data.main.temp_max;\n        mapped.min = data.main.temp_min;\n      } // remove undefined fields\n\n\n      Object.keys(mapped).forEach(key => mapped[key] === undefined && delete data[key]);\n      return mapped;\n    };\n\n    this.state = {\n      city: initCity,\n      currentWeather: {},\n      forecast: [],\n      error: \"\"\n    };\n  }\n\n  setCity(city) {\n    this.setState({\n      city: city\n    });\n  }\n\n  componentDidMount() {\n    this.setState({\n      error: \"\"\n    });\n    this.getWeather(this.state.city);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.city !== prevState.city) {\n      this.setState({\n        error: \"\"\n      });\n      this.getWeather(this.state.city);\n    }\n  }\n\n  handleResponse(response) {\n    if (response.ok) {\n      return response.json();\n    } else {\n      throw new Error(\"Error: Location \" + response.statusText);\n    }\n  }\n\n  getWeather(city) {\n    fetch(\"\".concat(REACT_APP_API_URL, \"/weather/?q=\").concat(city, \"&units=metric&APPID=\").concat(REACT_APP_API_KEY)).then(res => this.handleResponse(res)).then(weather => {\n      if (Object.entries(weather).length) {\n        const mappedData = this.mapDataToWeatherInterface(weather);\n        return mappedData;\n      }\n    }).then(mappedData => this.getForecast(this.state.city, mappedData)).catch(error => {\n      console.error(\"Error fetching current weather for \".concat(this.state.city, \": \"), error);\n      this.setState({\n        error: error.message\n      });\n    });\n  }\n\n  getForecast(city, mappedData) {\n    fetch(\"\".concat(REACT_APP_API_URL, \"/forecast/?q=\").concat(city, \"&units=metric&APPID=\").concat(REACT_APP_API_KEY)).then(res => this.handleResponse(res)).then(result => {\n      if (Object.entries(result).length) {\n        const forecast = [];\n\n        for (let i = 0; i < result.list.length; i += 8) {\n          forecast.push(this.mapDataToWeatherInterface(result.list[i + 4]));\n        }\n\n        this.setState({\n          currentWeather: mappedData,\n          forecast: forecast\n        });\n      }\n    }).catch(error => {\n      console.error(\"Error fetching forecast for \".concat(this.state.city, \": \"), error);\n      return [];\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          city = _this$state.city,\n          currentWeather = _this$state.currentWeather,\n          forecast = _this$state.forecast,\n          error = _this$state.error;\n\n    if (Object.keys(currentWeather).length || Object.keys(forecast).length) {\n      return React.createElement(Container, {\n        maxWidth: \"sm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(Weather, {\n        city: city,\n        currentWeather: currentWeather,\n        forecast: forecast,\n        setCity: this.setCity.bind(this),\n        error: error,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }));\n    } else {\n      return React.createElement(LoadingSpinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      });\n    }\n  }\n\n}\n\nexport default WeatherApp;","map":{"version":3,"sources":["/Users/michael/front-3/src/components/WeatherAPP/WeatherApp.js"],"names":["React","Container","LoadingSpinner","Weather","REACT_APP_API_URL","REACT_APP_API_KEY","initCity","WeatherApp","Component","constructor","props","mapDataToWeatherInterface","data","mapped","city","name","country","sys","date","dt","humidity","main","icon_id","weather","id","temperature","temp","description","wind_speed","Math","round","wind","speed","condition","cod","dt_txt","icon","temp_min","temp_max","max","min","Object","keys","forEach","key","undefined","state","currentWeather","forecast","error","setCity","setState","componentDidMount","getWeather","componentDidUpdate","prevProps","prevState","handleResponse","response","ok","json","Error","statusText","fetch","then","res","entries","length","mappedData","getForecast","catch","console","message","result","i","list","push","render","bind"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Container } from \"@material-ui/core\";\nimport LoadingSpinner from \"./loading-spinner\";\n\nimport Weather from \"./Weather\";\n\nconst REACT_APP_API_URL = 'https://api.openweathermap.org/data/2.5';\nconst REACT_APP_API_KEY = 'bc2888013d5044448dbead76c8b69c18';\n\nconst initCity = \"Melbourne\";\n\nclass WeatherApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      city: initCity,\n      currentWeather: {},\n      forecast: [],\n      error: \"\"\n    };\n  }\n\n  setCity(city) {\n    this.setState({\n      city: city\n    });\n  }\n\n  componentDidMount() {\n    this.setState({ error: \"\" });\n    this.getWeather(this.state.city);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.city !== prevState.city) {\n      this.setState({ error: \"\" });\n      this.getWeather(this.state.city);\n    }\n  }\n\n  handleResponse(response) {\n    if (response.ok) {\n      return response.json();\n    } else {\n      throw new Error(\"Error: Location \" + response.statusText);\n    }\n  }\n\n  getWeather(city) {\n    fetch(\n      `${REACT_APP_API_URL}/weather/?q=${city}&units=metric&APPID=${REACT_APP_API_KEY}`\n    )\n      .then(res => this.handleResponse(res))\n      .then(weather => {\n        if (Object.entries(weather).length) {\n          const mappedData = this.mapDataToWeatherInterface(weather);\n\n          return mappedData;\n        }\n      })\n      .then(mappedData => this.getForecast(this.state.city, mappedData))\n      .catch(error => {\n        console.error(\n          `Error fetching current weather for ${this.state.city}: `,\n          error\n        );\n        this.setState({ error: error.message });\n      });\n  }\n\n  getForecast(city, mappedData) {\n    fetch(\n      `${REACT_APP_API_URL}/forecast/?q=${city}&units=metric&APPID=${REACT_APP_API_KEY}`\n    )\n      .then(res => this.handleResponse(res))\n      .then(result => {\n        if (Object.entries(result).length) {\n          const forecast = [];\n          for (let i = 0; i < result.list.length; i += 8) {\n            forecast.push(this.mapDataToWeatherInterface(result.list[i + 4]));\n          }\n          this.setState({\n            currentWeather: mappedData,\n            forecast: forecast\n          });\n        }\n      })\n      .catch(error => {\n        console.error(\n          `Error fetching forecast for ${this.state.city}: `,\n          error\n        );\n        return [];\n      });\n  }\n\n  mapDataToWeatherInterface = data => {\n    const mapped = {\n      city: data.name,\n      country: data.sys.country,\n      date: data.dt * 1000,\n      humidity: data.main.humidity,\n      icon_id: data.weather[0].id,\n      temperature: data.main.temp,\n      description: data.weather[0].description,\n      wind_speed: Math.round(data.wind.speed * 3.6), // convert from m/s to km/h\n      condition: data.cod\n    };\n\n    // Add extra properties for the five day forecast: dt_txt, icon, min, max\n    if (data.dt_txt) {\n      mapped.dt_txt = data.dt_txt;\n    }\n\n    if (data.weather[0].icon) {\n      mapped.icon = data.weather[0].icon;\n    }\n\n    if (data.main.temp_min && data.main.temp_max) {\n      mapped.max = data.main.temp_max;\n      mapped.min = data.main.temp_min;\n    }\n\n    // remove undefined fields\n    Object.keys(mapped).forEach(\n      key => mapped[key] === undefined && delete data[key]\n    );\n\n    return mapped;\n  };\n\n  render() {\n    const { city, currentWeather, forecast, error } = this.state;\n\n    if (Object.keys(currentWeather).length || Object.keys(forecast).length) {\n      return (\n        <Container maxWidth=\"sm\">\n          <Weather\n            city={city}\n            currentWeather={currentWeather}\n            forecast={forecast}\n            setCity={this.setCity.bind(this)}\n            error={error}\n          />\n        </Container>\n      );\n    } else {\n      return <LoadingSpinner />;\n    }\n  }\n}\n\nexport default WeatherApp;\n"]},"metadata":{},"sourceType":"module"}